// Mocks generated by Mockito 5.4.6 from annotations
// in mad_flutter_practicum/test/mocks/datasource.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i3;

import 'package:mad_flutter_practicum/domain/datasource/db_datasource.dart' as _i6;
import 'package:mad_flutter_practicum/domain/datasource/preference_datasource.dart' as _i7;
import 'package:mad_flutter_practicum/domain/datasource/rest_datasource.dart' as _i2;
import 'package:mad_flutter_practicum/domain/model/app_theme_mode.dart' as _i8;
import 'package:mad_flutter_practicum/domain/model/currency_model.dart' as _i4;
import 'package:mad_flutter_practicum/domain/model/news_model.dart' as _i5;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

/// A class which mocks [RestDatasource].
///
/// See the documentation for Mockito's code generation for more information.
class MockRestDatasource extends _i1.Mock implements _i2.RestDatasource {
  MockRestDatasource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<List<_i4.CurrencyModel>> getCurrencyList() => (super.noSuchMethod(
        Invocation.method(
          #getCurrencyList,
          [],
        ),
        returnValue: _i3.Future<List<_i4.CurrencyModel>>.value(<_i4.CurrencyModel>[]),
      ) as _i3.Future<List<_i4.CurrencyModel>>);

  @override
  _i3.Future<List<_i5.NewsModel>> getNewsList() => (super.noSuchMethod(
        Invocation.method(
          #getNewsList,
          [],
        ),
        returnValue: _i3.Future<List<_i5.NewsModel>>.value(<_i5.NewsModel>[]),
      ) as _i3.Future<List<_i5.NewsModel>>);
}

/// A class which mocks [DbDatasource].
///
/// See the documentation for Mockito's code generation for more information.
class MockDbDatasource extends _i1.Mock implements _i6.DbDatasource {
  MockDbDatasource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<List<_i4.CurrencyModel>> getCurrencyList() => (super.noSuchMethod(
        Invocation.method(
          #getCurrencyList,
          [],
        ),
        returnValue: _i3.Future<List<_i4.CurrencyModel>>.value(<_i4.CurrencyModel>[]),
      ) as _i3.Future<List<_i4.CurrencyModel>>);

  @override
  _i3.Future<List<_i5.NewsModel>> getNewsList() => (super.noSuchMethod(
        Invocation.method(
          #getNewsList,
          [],
        ),
        returnValue: _i3.Future<List<_i5.NewsModel>>.value(<_i5.NewsModel>[]),
      ) as _i3.Future<List<_i5.NewsModel>>);

  @override
  _i3.Future<void> saveCurrencyList(List<_i4.CurrencyModel>? value) => (super.noSuchMethod(
        Invocation.method(
          #saveCurrencyList,
          [value],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<void> saveNewsList(List<_i5.NewsModel>? value) => (super.noSuchMethod(
        Invocation.method(
          #saveNewsList,
          [value],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);
}

/// A class which mocks [PreferenceDatasource].
///
/// See the documentation for Mockito's code generation for more information.
class MockPreferenceDatasource extends _i1.Mock implements _i7.PreferenceDatasource {
  MockPreferenceDatasource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i8.AppThemeMode get themeMode => (super.noSuchMethod(
        Invocation.getter(#themeMode),
        returnValue: _i8.AppThemeMode.light,
      ) as _i8.AppThemeMode);

  @override
  void setThemeMode(_i8.AppThemeMode? mode) => super.noSuchMethod(
        Invocation.method(
          #setThemeMode,
          [mode],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i3.Future<String?> getToken() => (super.noSuchMethod(
        Invocation.method(
          #getToken,
          [],
        ),
        returnValue: _i3.Future<String?>.value(),
      ) as _i3.Future<String?>);

  @override
  _i3.Future<void> setToken(String? token) => (super.noSuchMethod(
        Invocation.method(
          #setToken,
          [token],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);
}
